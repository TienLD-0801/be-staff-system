type User {
  fullName: String
  shortName: String
  email: String
  phone: String
  linkedIn: String
  role: Int
  startDate: String
  endDate: String
  gender: Int
  isFrozen: Boolean
  skills: [String]
  createdAt: String
  updatedAt: String
}

type CreateUserResponse {
  statusCode: Int!
  message: String
  data: User
  error: String
}


input CreateUserInput {
  fullName: String!
  shortName: String!
  email: String!
  password: String!
  phone: String!
  role: Int!
  gender: Int
}

type GetAllUserResponse {
  statusCode: Int!
  message: String
  data: UsersResponse
  error: String
}


type UserListResponse {
  id: String
  fullName: String
  shortName: String
  email: String
  phone: String
  linkedIn: String
  role: Int
  startDate: String
  endDate: String
  gender: Int
  isFrozen: Boolean
  skills: [String]
  createdAt: String
  updatedAt: String
}


type UsersResponse {
  userList: [UserListResponse]
  paging: Paging
}


type UserById {
  id: String
  fullName: String
  shortName: String
  email: String
  phone: String
  linkedIn: String
  role: Int
  startDate: String
  endDate: String
  gender: Int
  isFrozen: Boolean
  skills: [String]
  createdAt: String
  updatedAt: String
}


type GetUserByIdResponse {
  statusCode: Int!
  message: String
  data: UserById
  error: String
}

type Query {
  getAllUsers(pager: Pager!, filterConditions: JSON, orderConditions: JSON): GetAllUserResponse
  getUserById(id: String!): GetUserByIdResponse
}

type Mutation {
  createUser(input: CreateUserInput!): CreateUserResponse
}